// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
model Store{
  id        String   @id @default(uuid())
  name      String
  userId    String
  destacados Destacado[] @relation("StoreToDestacado")
  entradas Entrada[] @relation("StoreToEntrada")
  categories Category[] @relation("StoreToCategory")
  fechas     Fecha[] @relation("StoreToFecha")
  ubicacions    Ubicacion[] @relation("StoreToUbicacion")
  eventos  Evento[] @relation("StoreToEvento")
  orders Order[] @relation("StoreToOrder")
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Destacado{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToDestacado", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}
model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  destacadoId String
  destacado Destacado @relation(fields: [destacadoId],references: [id])
  eventos Evento[] @relation("CategoryToEvento")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
  @@index([destacadoId])
}
model Fecha{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToFecha",fields: [storeId],references: [id])
  name String
  value String
  eventos Evento[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}
model Entrada{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToEntrada",fields: [storeId],references: [id])
  name String
  value String
  quantity String
  eventos Evento[] @relation("EntradaToEvento")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}
model Ubicacion{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToUbicacion",fields: [storeId],references: [id])
  name String
  value String
  eventos Evento[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}
model Evento{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToEvento",fields: [storeId],references: [id])
  categoryId String
  category Category @relation("CategoryToEvento",fields: [categoryId], references: [id])
  entradaId String
  entrada Entrada @relation("EntradaToEvento",fields: [entradaId],references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  fechaId String
  fecha Fecha @relation(fields: [fechaId],references: [id])
  ubicacionId String
  ubicacion Ubicacion @relation(fields: [ubicacionId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([fechaId])
  @@index([ubicacionId])
}
model Image {
  id String @id @default(uuid())
  eventoId String
  evento Evento @relation(fields: [eventoId],references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([eventoId])
  }

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  eventoId String
  evento Evento @relation(fields: [eventoId], references: [id])

  @@index([orderId])
  @@index([eventoId])
}